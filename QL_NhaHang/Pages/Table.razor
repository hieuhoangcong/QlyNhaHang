@page "/Admin/Table"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using QL_NhaHang.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<AuthorizeView>
    <Authorized>
        <style>
            .table td, .table th {
                vertical-align: middle;
            }

            .btn-primaryy {
                background-color: orange !important;
                color: white !important;
            }

                .btn-primaryy:hover {
                    background-color: darkorange !important;
                    color: white !important;
                }

            .btn-danger {
                background-color: red !important;
                color: white !important;
            }

                .btn-danger:hover {
                    background-color: darkred !important;
                    color: white !important;
                }

            .btn-primary {
                background-color: blue !important;
                color: white !important;
            }

                .btn-primary:hover {
                    background-color: darkblue !important;
                    color: white !important;
                }

            .card-header {
                background-color: #007bff;
                color: white;
                border-radius: 12px 12px 0 0;
            }

            .wider-card {
                max-width: 95%;
                margin: 0 auto;
            }
        </style>

        <div class="container">
            <br />
            <br />
            <h2 class="text-center mb-4">Quản lý bàn ăn</h2>
            <div class="card mb-4 wider-card">
                <div class="card-header">
                    <h5 class="card-title">Danh sách bàn ăn</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <input type="text" class="form-control" placeholder="Tìm kiếm bàn ăn..." @bind="searchTerm" @oninput="FilterTables" />
                    </div>
                    <table class="table table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>#</th>
                                <th>Tên bàn</th>
                                <th>Số lượng người</th>
                                <th>Hành động</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in PaginatedTables)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Name</td>
                                    <td>@item.client</td>
                                    <td>
                                        <button class="btn btn-sm btn-primaryy" @onclick="() => EditTable(item)">Chỉnh sửa</button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTable(item.Id)">Xóa</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="pagination">
                <a class="@GetPageClass(CurrentPage - 1)" @onclick="() => ChangePage(CurrentPage - 1)">«</a>
                @for (int i = 1; i <= TotalPages; i++)
                {
                    <a class="@GetPageClass(i)" @onclick="() => ChangePage(i)">@i</a>
                }
                <a class="@GetPageClass(CurrentPage + 1)" @onclick="() => ChangePage(CurrentPage + 1)">»</a>
            </div>

            <div class="card mt-4 wider-card">
                <div class="card-header">
                    <h5 class="card-title">Thêm bàn ăn mới</h5>
                </div>
                <div class="card-body">
                    <form @onsubmit="AddTable">
                        <div class="form-group">
                            <label for="tableName">Tên Bàn</label>
                            <input type="text" class="form-control" id="tableName" @bind="table.Name" placeholder="Tên bàn">
                        </div>
                        <div class="form-group">
                            <label for="peopleCount">Số lượng người</label>
                            <input type="number" class="form-control" id="peopleCount" @bind="table.client" placeholder="Số lượng người">
                        </div>
                        <button type="submit" class="btn btn-primary">Thêm bàn ăn</button>
                    </form>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>Bạn không có quyền truy cập vào trang này. Vui lòng <a href="/Admin">đăng nhập</a>.</p>
    </NotAuthorized>
</AuthorizeView>

<QL_NhaHang.Pages.Popup.EditTablePopup Item="@table1" IsVisible="isEditMenuPopupVisible" IsVisibleChanged="@(isVisible2 => isEditMenuPopupVisible = isVisible2)" />

@code {
    public List<DinnerTable> tables = new List<DinnerTable>();
    public DinnerTable table = new DinnerTable();
    public DinnerTable table1 = new DinnerTable();
    public readonly QlNhaHangContext _context = new QlNhaHangContext();
    bool isEditMenuPopupVisible = false;
    public string StatusAsString { get; set; }
    public string searchTerm { get; set; } = "";

    private const int PageSize = 5;
    private int CurrentPage = 1;
    private int TotalPages => (int)Math.Ceiling((double)tables.Count / PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        tables = await _context.DinnerTables.ToListAsync();
        UpdatePaginatedTables();
    }

    private List<DinnerTable> PaginatedTables => tables
        .Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || t.client.ToString().Contains(searchTerm))
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize)
        .ToList();

    private void ChangePage(int pageNumber)
    {
        if (pageNumber > 0 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            UpdatePaginatedTables();
        }
    }

    private string GetPageClass(int pageNumber)
    {
        return pageNumber == CurrentPage ? "active" : "";
    }

    async Task AddTable()
    {
        table.Id = Guid.NewGuid();
        _context.DinnerTables.Add(table);
        await _context.SaveChangesAsync();
        table = new DinnerTable();
        await LoadData();
    }

    async Task DeleteTable(Guid tableId)
    {
        var tableToDelete = await _context.DinnerTables.FindAsync(tableId);
        if (tableToDelete != null)
        {
            _context.DinnerTables.Remove(tableToDelete);
            await _context.SaveChangesAsync();
            tables.Remove(tableToDelete);
            UpdatePaginatedTables();
        }
    }

    void EditTable(DinnerTable Table)
    {
        table1 = Table;
        isEditMenuPopupVisible = true;
    }

    private void UpdatePaginatedTables()
    {
        StateHasChanged();
    }

    private void FilterTables(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        UpdatePaginatedTables();
    }
}
